npm install @react-navigation/material-top-tabs react-native-tab-view

npm install @react-navigation/stack

npm install react-native-paper


import React, { useState } from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs';
import { createStackNavigator } from '@react-navigation/stack';
import { ScrollView, View, Text, Image, StyleSheet, TouchableOpacity } from 'react-native';
import { RadioButton } from 'react-native-paper'; // 라디오 버튼 라이브러리 추가


const Tab = createMaterialTopTabNavigator();
const Stack = createStackNavigator(); // Stack 생성

// 메뉴 데이터
const menuData = {
  음료: [
    { id: 1, name: '아메리카노', image: require('./assets/coffee/1.jpg'), description: '진한 커피 맛의 아메리카노' },
    { id: 2, name: '카페라떼', image: require('./assets/coffee/2.png'), description: '부드러운 우유와 커피의 조화' },
    { id: 3, name: '모카', image: require('./assets/coffee/3.jpg'), description: '초콜릿과 커피의 환상적인 조화' },
    { id: 4, name: '헤이즐넛 아메리카노', image: require('./assets/coffee/4.jpg'), description: '헤이즐넛 향이 가득한 아메리카노' },
    { id: 5, name: '아포카토', image: require('./assets/coffee/5.jpg'), description: '아이스크림 위에 에스프레소' },
    { id: 6, name: '아인슈페너', image: require('./assets/coffee/6.jpg'), description: '부드러운 크림과 에스프레소' },
    { id: 7, name: '말차라떼', image: require('./assets/coffee/7.jpg'), description: '신선한 말차와 우유의 조화' },
    { id: 8, name: '자바칩 프라푸치노', image: require('./assets/coffee/8.webp'), description: '자바칩과 우유의 시원한 음료' },
    { id: 9, name: '고구마라떼', image: require('./assets/coffee/9.jpg'), description: '달콤한 고구마로 만든 라떼' },
    { id: 10, name: '아이스티', image: require('./assets/coffee/10.jpg'), description: '상큼한 아이스티' },
    { id: 11, name: '초코라떼', image: require('./assets/coffee/11.jpg'), description: '진한 초콜릿 맛의 라떼' },
  ],
  디저트: [
    { id: 1, name: '케이크', image: require('./assets/desert/1.jpg'), description: '부드럽고 촉촉한 케이크' },
    { id: 2, name: '쿠키', image: require('./assets/desert/2.jpg'), description: '바삭한 쿠키' },
    { id: 3, name: '머핀', image: require('./assets/desert/3.jpg'), description: '다양한 맛의 머핀' },
  ],
};


// 상세화면 컴포넌트
const DetailScreen = ({ route, navigation, addToCart }) => {
  const { item } = route.params;

  const [temperature, setTemperature] = useState('HOT');
  const [size, setSize] = useState('기본');
  const [extraShot, setExtraShot] = useState(false);
  const [syrup, setSyrup] = useState(false);

  const handleAddToCart = () => {
    addToCart({
      name: item.name,
      image: item.image, // 이미지 정보를 추가
      temperature,
      size,
      extraShot,
      syrup,
    });
    alert('장바구니에 담았습니다!');
    navigation.goBack();
  };

  return (
    <View style={styles.detailContainer}>
      <Image source={item.image} style={styles.detailImage} />
      <Text style={styles.detailText}>{item.name}</Text>
      <Text style={styles.detailDescription}>{item.description}</Text>

      <ScrollView 
        contentContainerStyle={{ paddingBottom: 80 }} 
        keyboardShouldPersistTaps="handled"
      >
        <Text>온도 선택:</Text>
        <RadioButton.Group onValueChange={setTemperature} value={temperature}>
          <View style={styles.radioGroup}>
            <View style={styles.radioItem}>
              <RadioButton value="HOT" />
              <Text>HOT</Text>
            </View>
            <View style={styles.radioItem}>
              <RadioButton value="ICE" />
              <Text>ICE</Text>
            </View>
          </View>
        </RadioButton.Group>

        <Text>사이즈 선택:</Text>
        <RadioButton.Group onValueChange={setSize} value={size}>
          <View style={styles.radioGroup}>
            <View style={styles.radioItem}>
              <RadioButton value="기본" />
              <Text>기본</Text>
            </View>
            <View style={styles.radioItem}>
              <RadioButton value="대" />
              <Text>대</Text>
            </View>
            <View style={styles.radioItem}>
              <RadioButton value="중" />
              <Text>중</Text>
            </View>
          </View>
        </RadioButton.Group>

        <Text>샷 추가:</Text>
        <RadioButton.Group onValueChange={(value) => setExtraShot(value === '추가')} value={extraShot ? '추가' : '없음'}>
          <View style={styles.radioGroup}>
            <View style={styles.radioItem}>
              <RadioButton value="없음" />
              <Text>없음</Text>
            </View>
            <View style={styles.radioItem}>
              <RadioButton value="추가" />
              <Text>추가</Text>
            </View>
          </View>
        </RadioButton.Group>

        <Text>시럽 추가:</Text>
        <RadioButton.Group onValueChange={(value) => setSyrup(value === '추가')} value={syrup ? '추가' : '없음'}>
          <View style={styles.radioGroup}>
            <View style={styles.radioItem}>
              <RadioButton value="없음" />
              <Text>없음</Text>
            </View>
            <View style={styles.radioItem}>
              <RadioButton value="추가" />
              <Text>추가</Text>
            </View>
          </View>
        </RadioButton.Group>
      </ScrollView>

      <TouchableOpacity 
        style={styles.orderButton} 
        onPress={handleAddToCart}
      >
        <Text style={styles.orderButtonText}>장바구니에 담기</Text>
      </TouchableOpacity>
    </View>
  );
};



// MenuTab 컴포넌트
const MenuTab = ({ navigation, category }) => {
  return (
    <View style={{ flex: 1 }}>
      <ScrollView 
        contentContainerStyle={{ flexGrow: 1, paddingBottom: 80 }} 
        keyboardShouldPersistTaps="handled"
      >
        <View style={styles.menuContainer}>
          {menuData[category].map((item) => (
            <TouchableOpacity
              key={item.id}
              style={styles.menuItem}
              onPress={() => navigation.navigate('Detail', { item })}
            >
              <Image source={item.image} style={styles.menuImage} />
              <Text style={styles.menuText}>{item.name}</Text>
            </TouchableOpacity>
          ))}
        </View>
      </ScrollView>
      <TouchableOpacity 
        style={styles.orderButton}
        onPress={() => navigation.navigate('Cart')}>
        <Text style={styles.orderButtonText}>장바구니로 이동</Text>
      </TouchableOpacity>
    </View>
  );
};


// App 컴포넌트
export default function App() {
  const [cartItems, setCartItems] = useState([]); // 장바구니 상태 추가

  const addToCart = (item) => {
    setCartItems([...cartItems, item]); // 장바구니에 항목 추가
  };

  const clearCart = () => {
    setCartItems([]); // 장바구니 비우기
  };

  return (
    <NavigationContainer>
      <Stack.Navigator>
        <Stack.Screen name="Home" options={{ headerShown: false }}>
          {() => (
            <Tab.Navigator>
              <Tab.Screen name="음료">
                {(props) => (
                  <MenuTab {...props} category="음료" addToCart={addToCart} />
                )}
              </Tab.Screen>
              <Tab.Screen name="디저트">
                {(props) => (
                  <MenuTab {...props} category="디저트" addToCart={addToCart} />
                )}
              </Tab.Screen>
            </Tab.Navigator>
          )}
        </Stack.Screen>
        <Stack.Screen name="Detail" options={{ title: '상세보기' }}>
          {(props) => (
            <DetailScreen {...props} addToCart={addToCart} />
          )}
        </Stack.Screen>
        <Stack.Screen name="Cart">
          {(props) => (
            <CartScreen {...props} cartItems={cartItems} clearCart={clearCart} />
          )}
        </Stack.Screen>
      </Stack.Navigator>
    </NavigationContainer>
  );
}





// 장바구니 화면 컴포넌트
const CartScreen = ({ cartItems, navigation, clearCart }) => {
  return (
    <View style={styles.cartContainer}>
      <Text style={styles.cartTitle}>장바구니</Text>
      <ScrollView>
        {cartItems.length === 0 ? (
          <Text style={styles.emptyCart}>장바구니가 비어 있습니다.</Text>
        ) : (
          cartItems.map((item, index) => (
            <View key={index} style={styles.cartItem}>
              <Image source={item.image} style={styles.cartImage} />
              <View style={styles.cartDetails}>
                <Text>{item.name}</Text>
                <Text>온도: {item.temperature}</Text>
                <Text>사이즈: {item.size}</Text>
                <Text>샷 추가: {item.extraShot ? '예' : '아니요'}</Text>
                <Text>시럽 추가: {item.syrup ? '예' : '아니요'}</Text>
              </View>
            </View>
          ))
        )}
      </ScrollView>
      <TouchableOpacity 
        style={styles.orderButton} 
        onPress={() => {
          alert('주문이 완료되었습니다!');
          clearCart(); // 장바구니 비우기
          navigation.goBack(); // 이전 화면으로 이동
        }}
      >
        <Text style={styles.orderButtonText}>주문하기</Text>
      </TouchableOpacity>
    </View>
  );
};




// 스타일 정의
const styles = StyleSheet.create({
  menuContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
    padding: 10,
  },
  menuItem: {
    width: '48%', // 한 행에 메뉴 두개씩 출력
    alignItems: 'center',
    marginBottom: 10,
  },
  menuImage: {
    width: '100%',
    height: 150,
    borderRadius: 10,
  },
  menuText: {
    textAlign: 'center',
    marginTop: 5,
  },
  orderButton: {
    backgroundColor: '#007BFF',
    padding: 15,
    borderRadius: 5,
    alignItems: 'center',
    margin: 10,
  },
  orderButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: 'bold',
  },
  detailContainer: {
    flex: 1,
    alignItems: 'center',
    padding: 20,
  },
  detailImage: {
    width: '100%',
    height: 300,
    borderRadius: 10,
  },
  detailText: {
    fontSize: 24,
    fontWeight: 'bold',
    marginVertical: 10,
  },
  detailDescription: {
    fontSize: 16,
    textAlign: 'center',
  },
  picker: {
    height: 50,
    width: 150,
    marginVertical: 10,
  },
  radioGroup: {
    flexDirection: 'row',
    alignItems: 'center',
    marginVertical: 10,
  },
  radioItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginRight: 20, // 간격 조정
  },
  cartContainer: {
    flex: 1,
    padding: 20,
  },
  cartTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 10,
  },
  emptyCart: {
    textAlign: 'center',
    fontSize: 16,
    marginTop: 20,
  },
  cartItem: {
    flexDirection: 'row', // 이미지와 텍스트를 나란히 배치
    alignItems: 'center', // 세로 정렬
    marginBottom: 15,
    padding: 10,
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 5,
  },
  cartImage: {
    width: 50, // 이미지 크기 조정
    height: 50, // 이미지 크기 조정
    borderRadius: 5,
    marginRight: 10, // 이미지와 텍스트 간격 조정
  },
  cartDetails: {
    flex: 1, // 텍스트가 남은 공간을 차지하도록 설정
  },
});
